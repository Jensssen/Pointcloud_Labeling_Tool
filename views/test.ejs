<!DOCTYPE html>
<html lang="en">

<head>
    <title>three.js webgl - geometry - cube</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
    <link type="text/css" rel="stylesheet" href="../stylesheets/threejs.css">
    <style>
        .selectBox {
            border: 1px solid #55aaff;
            background-color: rgba(75, 160, 255, 0.3);
            position: fixed;
        }
    </style>
</head>

<body>
    <script type="module">

        import * as THREE from '/threejs/build/three.module.js';
        //import { OrbitControls } from '/threejs/jsm/controls/OrbitControls.js';
        import { TrackballControls } from '/threejs/jsm/controls/TrackballControls.js';
        import Stats from '/threejs/jsm/libs/stats.module.js';
        import { SelectionBox } from '/threejs/jsm/interactive/SelectionBox.js';
        import { SelectionHelper } from '/threejs/jsm/interactive/SelectionHelper.js';


        let camera, scene, renderer, controls;
        let mesh;
        let angle = 0;
        let x = true;
        init();
        animate();

        function init() {

            camera = new THREE.PerspectiveCamera(70, window.innerWidth / window.innerHeight, 1, 1000);
            camera.position.z = 400;
            scene = new THREE.Scene();

            const texture = new THREE.TextureLoader().load('/threejs/textures/crate.gif');

            const geometry = new THREE.BoxBufferGeometry(50, 50, 50);
            const material = new THREE.MeshBasicMaterial({ map: texture });

            mesh = new THREE.Mesh(geometry, material);
            scene.add(mesh);

            renderer = new THREE.WebGLRenderer({ antialias: true });
            renderer.setPixelRatio(window.devicePixelRatio);
            renderer.setSize(window.innerWidth, window.innerHeight);
            document.body.appendChild(renderer.domElement);

            controls = new TrackballControls( camera, renderer.domElement );

            window.addEventListener('resize', onWindowResize, false);

        }

        function onWindowResize() {

            camera.aspect = window.innerWidth / window.innerHeight;
            camera.updateProjectionMatrix();

            renderer.setSize(window.innerWidth, window.innerHeight);
            controls.handleResize();
        }

        function animate() {
            angle += 0.0009;
            camera.rotation.set( 0, 0, angle );

            requestAnimationFrame(animate);

            //mesh.rotation.x += 0.005;
            //mesh.rotation.y += 0.01;
            if (x){
            controls.update();
            }
            renderer.render(scene, camera);
        }

        		// Keyboard events
		document.addEventListener("keydown", function (event) {
			console.log(event.which);
			var keyCode = event.which;
			// Rotate point cloud around z

			if (keyCode == 88) {
                if (x){
                    x = false;
                } else {
                    x = true;
                }
			}
		});

    </script>

</body>

</html>